version: "3.8"

volumes:
  grafana_data:
  prometheus_data:
  # opensearch-data1:
  # opensearch-data2:

networks:
  monitoring:
    external: true

services:

  postgres:
    container_name: postgres
    image: postgres:14.5
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - ./postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PG_DATA: /var/lib/postgresql/data/pgdata
    networks:
      - monitoring

  zabbix-server:
    container_name: zabbix-server
    image: zabbix/zabbix-server-pgsql:ubuntu-6.4-latest
    restart: always
    ports:
      - "10051:10051"
    volumes:
      - ./config:/etc/zabbix
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro 
      - ./zabbix-server/alertscripts:/usr/lib/zabbix/alertscripts:ro
      - ./zabbix-server/externalscripts:/usr/lib/zabbix/externalscripts:ro
      - ./zabbix-server/dbscripts:/var/lib/zabbix/dbscripts:ro
      - ./zabbix-server/export:/var/lib/zabbix/export:rw
      - ./zabbix-server/modules:/var/lib/zabbix/modules:ro
      - ./zabbix-server/enc:/var/lib/zabbix/enc:ro
      - ./zabbix-server/ssh_keys:/var/lib/zabbix/ssh_keys:ro
      - ./zabbix-server/mibs:/var/lib/zabbix/mibs:ro
      - ./zabbix-server/snmptraps:/var/lib/zabbix/snmptraps:ro
      #  - ./env_vars/.ZBX_DB_CA_FILE:/run/secrets/root-ca.pem:ro
      #  - ./env_vars/.ZBX_DB_CERT_FILE:/run/secrets/client-cert.pem:ro
      #  - ./env_vars/.ZBX_DB_KEY_FILE:/run/secrets/client-key.pem:ro
    environment:
      DB_SERVER_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      - postgres
    networks:
      - monitoring

  zabbix-frontend:
    container_name: zabbix-frontend
    image: zabbix/zabbix-web-nginx-pgsql:6.4-ubuntu-latest
    restart: always
    ports:
      - "80:8080"
      - "443:8443"
    environment:
      DB_SERVER_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PHP_TZ: ${TZ}
      ZBX_SERVER_HOST: zabbix-server
    depends_on:
      - zabbix-server
    networks:
      - monitoring

  zabbix-agent:
    container_name: zabbix-agent
    image: zabbix/zabbix-agent:6.4-ubuntu-latest
    user: root
    restart: always
    privileged: true
    volumes:
      - ./zabbix-agent/var/run:/var/run
    ports:
      - "10050:10050"
    environment:
      - ZBX_HOSTNAME=zabbix-server
      - ZBX_SERVER_HOST=zabbix-server
    depends_on:
      - zabbix-server
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:9.1.6
    container_name: grafana
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=${GF_INSTALL_PLUGINS}
      - GF_ENABLE_GZIP=true
      - GF_DATABASE_MAX_OPEN_CONN=300
    ports:
      - 3000:3000
    depends_on:
      - zabbix-server
    networks:
      - monitoring

  # prometheus:
  #   image: prom/prometheus:v2.37.1
  #   container_name: prometheus
  #   restart: always
  #   volumes:
  #     - ./prometheus/:/etc/prometheus/
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yaml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=360h'
  #     - '--web.enable-lifecycle'
  #   ports:
  #     - 9090:9090
  #   networks:
  #     - monitoring

  # opensearch-node1: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
  #   #image: opensearchproject/opensearch:latest # Specifying the latest available image - modify if you want a specific version
  #   image: opensearch-custom-plugin
  #   container_name: opensearch-node1
  #   environment:
  #     - cluster.name=opensearch-cluster # Name the cluster
  #     - node.name=opensearch-node1 # Name the node that will run in this container
  #     - discovery.seed_hosts=opensearch-node1,opensearch-node2 # Nodes to look for when discovering the cluster
  #     - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2 # Nodes eligible to serve as cluster manager
  #     - bootstrap.memory_lock=true # Disable JVM heap memory swapping
  #     - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
  #     - "DISABLE_INSTALL_DEMO_CONFIG=true" # Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
  #     - "DISABLE_SECURITY_PLUGIN=true" # Disables Security plugin
  #     - prometheus.nodes.filter="_all"
  #     - prometheus.indices=true
  #     - prometheus.cluster.settings=true
  #   ulimits:
  #     memlock:
  #       soft: -1 # Set memlock to unlimited (no soft or hard limit)
  #       hard: -1
  #     nofile:
  #       soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
  #       hard: 65536
  #   volumes:
  #     - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
  #   ports:
  #     - 9200:9200 # REST API
  #     - 9600:9600 # Performance Analyzer
  #   networks:
  #     - monitoring # All of the containers will join the same Docker bridge network
  # opensearch-node2:
  #   #image: opensearchproject/opensearch:latest # This should be the same image used for opensearch-node1 to avoid issues
  #   image: opensearch-custom-plugin
  #   container_name: opensearch-node2
  #   environment:
  #     - cluster.name=opensearch-cluster
  #     - node.name=opensearch-node2
  #     - discovery.seed_hosts=opensearch-node1,opensearch-node2
  #     - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2
  #     - bootstrap.memory_lock=true
  #     - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - "DISABLE_INSTALL_DEMO_CONFIG=true" # Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
  #     - "DISABLE_SECURITY_PLUGIN=true" # Disables Security plugin
  #     - prometheus.nodes.filter="_all"
  #     - prometheus.indices=true
  #     - prometheus.cluster.settings=true
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536
  #       hard: 65536
  #   volumes:
  #     - opensearch-data2:/usr/share/opensearch/data
  #   networks:
  #     - monitoring
  # opensearch-dashboards:
  #   #image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
  #   image: opensearchproject/opensearch-dashboards:2.7.0
  #   container_name: opensearch-dashboards
  #   ports:
  #     - 5601:5601 # Map host port 5601 to container port 5601
  #   expose:
  #     - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
  #   environment:
  #     - 'OPENSEARCH_HOSTS=["http://opensearch-node1:9200","http://opensearch-node2:9200"]'
  #     - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true" # disables security dashboards plugin in OpenSearch Dashboards
  #   networks:
  #     - monitoring
